# Generated by Django 3.2.9 on 2022-01-18 10:49

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import tournament.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rounds', models.IntegerField(default=0, verbose_name='Rounds')),
                ('match_at', models.DateTimeField(null=True)),
                ('match_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Match_1', to='tournament.match')),
                ('match_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Match_2', to='tournament.match')),
                ('player_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player_A', to=settings.AUTH_USER_MODEL, verbose_name='Player 1')),
                ('player_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player_B', to=settings.AUTH_USER_MODEL, verbose_name='Player 2')),
            ],
            options={
                'verbose_name': 'Matche',
                'db_table': 'match_data',
                'permissions': (('view_only_match', 'Can View Only Match'),),
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tournament_name', models.CharField(max_length=50, verbose_name='Tournament Name')),
                ('image', models.ImageField(default='logo/default.jpeg', upload_to=tournament.models.tournament_logo_path, verbose_name='Image')),
                ('type', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], max_length=8, verbose_name='Tournament Type')),
                ('start_date', models.DateField(null=True, verbose_name='Start Date')),
                ('status', models.CharField(choices=[('on_going', 'On Going'), ('previous', 'Previous'), ('upcoming', 'Upcoming')], default='upcoming', max_length=10, verbose_name='STATUS')),
                ('registration_end_date', models.DateField(null=True, verbose_name='Registration End Date')),
                ('max_score', models.IntegerField(default=8, validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(30)], verbose_name='Max Score')),
                ('end_date', models.DateField(null=True, verbose_name='End Date')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tournament_created_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tournament',
                'verbose_name_plural': 'Tournament',
                'db_table': 'tournament_tournament',
                'permissions': (('view_only_created_tournament', 'Can View Only Created Tournament'),),
            },
        ),
        migrations.CreateModel(
            name='TournamentUserMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Players')),
            ],
            options={
                'db_table': 'tournament_tournament_user_mapping',
            },
        ),
        migrations.CreateModel(
            name='TournamentRequests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(choices=[(1, 'Accept'), (0, 'Decline')], default=-1)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tournamentrequests_created_by', to=settings.AUTH_USER_MODEL)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tournamentrequests_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tournament Request',
                'db_table': 'tournament_tournament_requests',
                'permissions': (('view_only_requested_to', 'Can View Only Requested To'),),
            },
        ),
        migrations.AddField(
            model_name='tournament',
            name='players',
            field=models.ManyToManyField(through='tournament.TournamentUserMapping', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tournament',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tournament_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tournament',
            name='winner1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Winner1', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Scores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_no', models.IntegerField(default=0)),
                ('score1', models.IntegerField(default=0)),
                ('score2', models.IntegerField(default=0)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Match', to='tournament.match', verbose_name='Match')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='SetWinner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Score',
                'verbose_name_plural': 'Score',
            },
        ),
        migrations.AddField(
            model_name='match',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournamemt', to='tournament.tournament', verbose_name='Tournament'),
        ),
        migrations.AddField(
            model_name='match',
            name='winner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winner', to=settings.AUTH_USER_MODEL),
        ),
    ]
